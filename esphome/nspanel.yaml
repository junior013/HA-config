# Set some variables for convenience
substitutions:
  # Device ID-s
  node_name: falipanel-bejarat
  device_name: Falipanel Bejárat
  # HA entity_id-s used on pages and buttons
  light_1: light.konyha
  light_2: light.eloterek
  shutter_1: cover.konyha

# Note: this may not be needed if the pull request has been merged.
# Check https://github.com/esphome/esphome/pull/2956 for current status.
external_components:
  - source: github://pr#2956
    components: [nextion]

esphome:
  name: $node_name
  comment: $device_name

esp32:
  board: esp32dev

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password

# Enable logging
logger:

# Enable wireless updates
ota:

# Enable Home Assistant API
api:
  services:
    # Service to play a song
    - service: play_rtttl
      variables:
        song_str: string
      then:
        - rtttl.play:
            rtttl: !lambda 'return song_str;'
    - service: upload_tft
      then:
        - lambda: 'id(disp1)->upload_tft();'
    - service: send_command
      variables:
        cmd: string
      then:
        - lambda: 'id(disp1).send_command_printf("%s", cmd.c_str());'        

# Define some global variables
globals:
  - id: actual_light_entity
    type: char[50]

# Sctipts to use anywhere
script:
  # Update time on sleep screen
  - id: update_time
    then:
      - lambda: |-
          auto time_text = id(homeassistant_time).now().strftime("%H:%M");
          id(disp1).set_component_text("time", time_text.c_str());
          auto date_text = id(homeassistant_time).now().strftime("%G.%m.%d.");
          id(disp1).set_component_text("date", date_text.c_str());
          auto day_text = id(homeassistant_time).now().strftime("%A");
          id(disp1).set_component_text("day", day_text.c_str());

  # Update temperature on sleep screen
  - id: update_temperature
    then:
      - lambda: |-
          id(disp1).set_component_text_printf(
            "screensaver.temp", "%.0f""°""C", id(current_temperature).state
          );

  # Update humidity on sleep screen
  - id: update_humidity
    then:
      - lambda: |-
          id(disp1).set_component_text_printf(
            "screensaver.humidity", "%.0f""%%", id(current_humidity).state
          );

  # Update weather on sleep screen
  - id: update_weather
    then:
      - lambda: |-
          id(disp1).set_component_pic("screensaver.weather", id(weather_id).state);

  # Update shutter screen
  - id: set_shutter_page
    then:
      - lambda: |-
          id(disp1).set_component_value("shutter.shutterlevel", id(shutter_position).state);
  
  # Update all screen variables
  - id: update_screen
    then:
      - script.execute: update_time
      - script.execute: update_temperature
      - script.execute: update_humidity
      - script.execute: update_weather
      - script.execute: set_shutter_page

  # Move shutter to pos
  - id: shutter_move_to_pos
    then:
      - homeassistant.service:
          service: cover.set_cover_position
          data:
            entity_id: $shutter_1
          data_template:
            position: "{{my_position}}"
          variables:
            my_position: |-
              return id(shutter_level).state;

  # Update light screen
  - id: set_light_page
    then:
      if:
        condition:
          lambda: 'return id(light_room).state == 1;'
        then:
          - lambda: |-
              id(disp1).set_component_value("light.brightness", id(konyha_bright).state);
              id(disp1).set_component_value("light.colortemp", id(konyha_color).state);
        else:
          if:
            condition:
              lambda: 'return id(light_room).state == 2;'
            then:
              - lambda: |-
                  id(disp1).set_component_value("light.brightness", id(eloterek_bright).state);
                  id(disp1).set_component_value("light.colortemp", id(eloterek_color).state);

  # Update lights in HA
  - id: update_entity_attributes
    then:
      if:
        condition:
          lambda: 'return id(light_room).state == 1;'
        then:
          - homeassistant.service:
              service: light.turn_on
              data:
                entity_id: $light_1
              data_template:
                brightness: "{{my_brightness}}"
                color_temp: "{{my_colortemp}}"
              variables:
                my_brightness: |-
                  return id(light_bright).state;
                my_colortemp: |-
                  return id(light_colortemp).state;
        else:
          if:
            condition:
              lambda: 'return id(light_room).state == 2;'
            then:
              - homeassistant.service:
                  service: light.turn_on
                  data:
                    entity_id: $light_2
                  data_template:
                    brightness: "{{my_brightness}}"
                    color_temp: "{{my_colortemp}}"
                  variables:
                    my_brightness: |-
                      return id(light_bright).state;
                    my_colortemp: |-
                      return id(light_colortemp).state;

  # Turn on lights in HA
  - id: turn_on_lights
    then:
      - if:
          condition:
            lambda: 'return id(light_room).state == 1;'
          then:
            - homeassistant.service:
                service: light.turn_on
                data:
                  entity_id: $light_1
          else:
            if:
              condition:
                lambda: 'return id(light_room).state == 2;'
              then:
                - homeassistant.service:
                    service: light.turn_on
                    data:
                      entity_id: $light_2
      - script.execute: set_light_page

  # Turn off lights in HA
  - id: turn_off_lights
    then:
      if:
        condition:
          lambda: 'return id(light_room).state == 1;'
        then:
          - homeassistant.service:
              service: light.turn_off
              data:
                entity_id: $light_1
        else:
          if:
            condition:
              lambda: 'return id(light_room).state == 2;'
            then:
              - homeassistant.service:
                  service: light.turn_off
                  data:
                    entity_id: $light_2

# Sync the time
time:
  - platform: homeassistant
    id: homeassistant_time
    on_time:
      - seconds: 0
        minutes: '*'
        then:
          - script.execute: update_time
          # - lambda: |-
          #     auto time_text = id(homeassistant_time).now().strftime("%H:%M");
          #     id(disp1).set_component_text("time", time_text.c_str());
          #     auto date_text = id(homeassistant_time).now().strftime("%G.%m.%d.");
          #     id(disp1).set_component_text("date", date_text.c_str());
          #     auto day_text = id(homeassistant_time).now().strftime("%A");
          #     id(disp1).set_component_text("day", day_text.c_str());

# A reboot button is always useful
button:
  - platform: restart
    name: Restart $device_name
  - platform: template
    name: $device_name TFT Upload
    device_class: update
    on_press:
      - lambda: 'id(disp1).upload_tft();'

# Define some inputs
binary_sensor:
  - platform: gpio
    name: $device_name Left Button
    pin:
      number: 14
      inverted: true
    on_press:
      - homeassistant.service:
          service: light.toggle
          data:
            entity_id: $light_1
    on_release:
      - lambda:  |-
          id(disp1).set_component_value("light.room", 1);
          id(disp1).send_command_printf("page light");
      
  - platform: gpio
    name: $device_name Right Button
    pin:
      number: 27
      inverted: true
    on_press:
      - homeassistant.service:
          service: light.toggle
          data:
            entity_id: $light_2
    on_release:
      lambda:  |-
          id(disp1).set_component_value("light.room", 2);
          id(disp1).send_command_printf("page light");

  # Shutter page buttons
  - platform: nextion
    name: $device_name Shutter Up
    page_id: 4
    component_id: 6
    on_press:
      then:
        - homeassistant.service:
            service: cover.open_cover
            data:
              entity_id: $shutter_1

  - platform: nextion
    name: $device_name Shutter Stop
    page_id: 4
    component_id: 7
    on_press:
      then:
        - homeassistant.service:
            service: cover.stop_cover
            data:
              entity_id: $shutter_1

  - platform: nextion
    name: $device_name Shutter Down
    page_id: 4
    component_id: 8
    on_press:
      then:
        - homeassistant.service:
            service: cover.close_cover
            data:
              entity_id: $shutter_1

  - platform: nextion
    name: $device_name Shutter Day
    page_id: 4
    component_id: 9
    on_press:
      then:
        - homeassistant.service:
            service: scene.turn_on
            data:
              entity_id: scene.covers_kitchen_day

  - platform: nextion
    name: $device_name Shutter Night
    page_id: 4
    component_id: 10
    on_press:
      then:
        - homeassistant.service:
            service: scene.turn_on
            data:
              entity_id: scene.covers_kitchen_night

  # Light page buttons
  - platform: nextion
    name: $device_name Light On
    page_id: 3
    component_id: 4
    on_press:
      then:
        script.execute: turn_on_lights

  - platform: nextion
    name: $device_name Light Off
    page_id: 3
    component_id: 5
    on_press:
      then:
        script.execute: turn_off_lights

  # Get light states from homeassistant
  - platform: homeassistant
    id: konyha_state
    entity_id: $light_1

  - platform: homeassistant
    id: eloterek_state
    entity_id: $light_2

text_sensor:
  - platform: wifi_info
    ssid:
      name: wifi_ssid
    ip_address:
      name: wifi_ip

  # Get current weather from homeassistant
  - platform: homeassistant
    id: current_weather
    entity_id: weather.openweathermap

sensor:
  - platform: wifi_signal
    name: $device_name WiFi Signal
    update_interval: 60s

  - platform: ntc
    id: temperature
    sensor: resistance_sensor
    calibration:
      b_constant: 3950
      reference_temperature: 25°C
      reference_resistance: 10kOhm
    name: $device_name Temperature

  - platform: resistance
    id: resistance_sensor
    sensor: ntc_source
    configuration: DOWNSTREAM
    resistor: 11.2kOhm

  - platform: adc
    id: ntc_source
    pin: 38
    update_interval: 10s
    attenuation: 11db
    
  - platform: template
    id: weather_id
    lambda: !lambda |-
      if (id(current_weather).state=="clear-night") {
        return 0;
      }
      if(id(current_weather).state=="cloudy") {
        return 1;
      }
      if(id(current_weather).state=="fog") {
        return 2;
      }
      if(id(current_weather).state=="hail") {
        return 3;
      }
      if(id(current_weather).state=="lightning") {
        return 4;
      }
      if(id(current_weather).state=="lightning-rainy") {
        return 5;
      }
      if(id(current_weather).state=="partlycloudy") {
        return 6;
      }
      if(id(current_weather).state=="pouring") {
        return 7;
      }
      if(id(current_weather).state=="rainy") {
        return 8;
      }
      if(id(current_weather).state=="snowy") {
        return 9;
      }
      if(id(current_weather).state=="snowy-rainy") {
        return 10;
      }
      if(id(current_weather).state=="sunny") {
        return 11;
      }
      if(id(current_weather).state=="windy") {
        return 12;
      }
      if(id(current_weather).state=="windy-variant") {
        return 12;
      }
      return 13;
    update_interval: 300s
    on_value:
      then:
        # - lambda: |-
        #     id(disp1).set_component_pic("screensaver.weather", x);
        - script.execute: update_weather

  # Grab current temperature from Home Assistant
  - platform: homeassistant
    id: current_temperature
    entity_id: sensor.balcony_temperature
    on_value:
      # Push it to the display
      then:
        # - lambda: 'id(disp1).set_component_text_printf("screensaver.temp", "%.0f""°""C", x);'
        - script.execute: update_temperature

  # Grab current humidity from Home Assistant
  - platform: homeassistant
    id: current_humidity
    entity_id: sensor.balcony_humidity
    on_value:
      # Push it to the display
      then:
        # - lambda: 'id(disp1).set_component_text_printf("screensaver.humidity", "%.0f""%%", x);'
        - script.execute: update_humidity

  # Get light page slider values
  - platform: nextion
    id: light_bright
    nextion_id: disp1
    name: $device_name Light brightness
    variable_name: brightness
    on_value:
      then:
        script.execute: update_entity_attributes

  - platform: nextion
    id: light_colortemp
    nextion_id: disp1
    name: $device_name Light color
    variable_name: colortemp
    on_value:
      then:
        script.execute: update_entity_attributes

  - platform: nextion
    id: light_room
    nextion_id: disp1
    name: $device_name Room ID
    variable_name: room
    on_value:
      then:
        # - if:
        #     condition:
        #       lambda: 'return id(light_room).state == 1;'
        #     then:
        #       - globals.set:
        #           id: actual_light_entity
        #           value: $light_1
        #     else:
        #       if:
        #         condition:
        #           lambda: 'return id(light_room).state == 2;'
        #         then:
        #           - globals.set:
        #               id: actual_light_entity
        #               value: $light_2
        - script.execute: set_light_page
    
  # Get light attributes from homeassistant
  - platform: homeassistant
    id: konyha_bright
    entity_id: $light_1
    attribute: brightness
    on_value:
      then:
        script.execute: set_light_page

  - platform: homeassistant
    id: konyha_color
    entity_id: $light_1
    attribute: color_temp
    on_value:
      then:
        script.execute: set_light_page

  - platform: homeassistant
    id: eloterek_bright
    entity_id: $light_2
    attribute: brightness
    on_value:
      then:
        script.execute: set_light_page

  - platform: homeassistant
    id: eloterek_color
    entity_id: $light_2
    attribute: color_temp
    on_value:
      then:
        script.execute: set_light_page

  # Get shutter page slider value
  - platform: nextion
    id: shutter_level
    nextion_id: disp1
    name: $device_name Shutter level
    variable_name: shutterlevel
    on_value:
      then:
        script.execute: shutter_move_to_pos

  # Get shutter position from homeassistant
  - platform: homeassistant
    id: shutter_position
    entity_id: $shutter_1
    attribute: current_position
    on_value:
      then:
        script.execute: set_shutter_page

# Define some outputs
switch:
  # The two relays
  - platform: gpio
    name: $device_name Relay 1
    id: relay_1
    pin:
      number: 22
  - platform: gpio
    name: $device_name Relay 2
    id: relay_2
    pin:
      number: 19

  # Pin 4 always needs to be on to power up the display
  - platform: gpio
    id: screen_power
    entity_category: config
    pin:
      number: 4
      inverted: true
    restore_mode: ALWAYS_ON

light:
  # Screen sleep light
  - platform: binary
    name: $device_name Screen
    output: null
    on_turn_on:
      - lambda: 'id(disp1).sleep(0);'
    on_turn_off:
      - lambda: |-
          id(disp1).set_auto_wake_on_touch(1);
          id(disp1).sleep(1);

number:
  platform: template
  name: $device_name Brightness
  id: brightness
  entity_category: config
  unit_of_measurement: '%'
  min_value: 0
  max_value: 100
  step: 1
  initial_value: 30
  set_action:
    then:
      - lambda: 'id(disp1).set_backlight_brightness(x/100);'

# Configure the internal bleeper
output:
  - platform: ledc
    id: buzzer_out
    pin:
      number: 21

# Enable ringtone music support
rtttl:
  id: buzzer
  output: buzzer_out

# Configure UART for communicating with the screen
uart:
  id: tf_uart
  tx_pin: 16
  rx_pin: 17
  baud_rate: 115200

# Configure the screen itself
display:
  - platform: nextion
    id: disp1
    uart_id: tf_uart
    tft_url: https://mona.izer.hu:8123/local/esphome/NSpanel.tft
    # A little fun...
    on_setup:
      then:
        - number.set:
            id: brightness
            value: 30
        - script.execute: update_screen
        # - lambda: |-
        #     id(disp1).set_component_text_printf(
        #       "screensaver.temp", "%.0f""°""C", id(current_temperature).state
        #     );
        #     id(disp1).set_component_text_printf(
        #       "screensaver.humidity", "%.0f""%%", id(current_humidity).state
        #     );
        - rtttl.play: "startup:d=16,o=5,b=180:c,e,g,c6,8p,c,16p,e,c"
    on_wake:
      then:
        - script.execute: update_screen