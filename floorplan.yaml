      name: Demo Floorplan
      image: /local/custom_ui/floorplan/floorplan.svg
      stylesheet: /local/custom_ui/floorplan/floorplan.css
      
      # These options are optional
      # warnings:                  # enable warnings (to find out why things might ot be working correctly)
      # pan_zoom:                  # enable experimental panning / zooming
      # hide_app_toolbar:          # hide the application toolbar (when used as a custom panel)
      # date_format: DD-MMM-YYYY   # Date format to use in hover-over text
      
      last_motion_entity: sensor.template_last_motion
      last_motion_class: last-motion

      groups:

        - name: Lights
          entities:
             - light.ceiling
             - light.fuggony_led
             - light.jack_led
             - group.kitchen_lights
             - group.living_room_lights
          states:
            - state: 'on'
              class: 'light-on'
            - state: 'off'
              class: 'light-off'
          action:
            domain: homeassistant   # This optional parameter allows you to use other services such as homeassistant.toggle like here.
            service: toggle

        - name: Switches
          entities:
             - switch.coffee
          states:
            - state: 'on'
              class: 'switch-on'
            - state: 'off'
              class: 'switch-off'
          action:
            domain: homeassistant   # This optional parameter allows you to use other services such as homeassistant.toggle like here.
            service: toggle

        - name: Sensors_temp
          entities:
             - sensor.inner_temperature
          text_template: '${entity.state ? Math.ceil(entity.state) + entity.attributes.unit_of_measurement : "undefined"}'
          class_template: '
            var temp = parseFloat(entity.state.replace("°", ""));
            if (temp < 10)
              return "temp-low";
            else if (temp < 30)
              return "temp-medium";
            else
              return "temp-high";
            '

        - name: Sensors_humidity
          entities:
             - sensor.inner_humidity
          text_template: '${entity.state ? Math.ceil(entity.state) + entity.attributes.unit_of_measurement : "undefined"}'
          class_template: '
            var temp = parseFloat(entity.state.replace("°", ""));
            if (temp < 10)
              return "temp-low";
            else if (temp < 30)
              return "temp-medium";
            else
              return "temp-high";
            '

        - name: Alarm Panel
          entities:
             - alarm_control_panel.alarm
          states:
            - state: 'armed_away'
              class: 'alarm-armed'
            - state: 'armed_home'
              class: 'alarm-armed'
            - state: 'disarmed'
              class: 'alarm-disarmed'

        - name: Binary sensors
          entities:
            - binary_sensor.front_hallway
            - binary_sensor.kitchen
            - binary_sensor.master_bedroom
            - binary_sensor.theatre_room
          states:
            - state: 'off'
              class: 'info-background'
            - state: 'on'
              class: 'warning-background'
          state_transitions:
            - name: On to off
              from_state: 'on'
              to_state: 'off'
              duration: 10

        - name: Cameras
          entities:
            - camera.hallway
            - camera.driveway
            - camera.front_door
            - camera.backyard
          states:
            - state: 'idle'
              class: 'camera-idle'
              
#        - name: thermostat_temp
#          entities:
#            - climate.downstairs
#            - climate.upstairs
#          text_template: '${entity.attributes.current_temperature ? entity.attributes.current_temperature : "undefined"}'
#
# The above text_template uses extended attributes from the climate.* objects to get current temperature.

#        - name: text_states
#          entities:
#            - sensor.downstairs_thermostat_humidity
#            - sensor.dark_sky_temperature
#            - sensor.last_message
#          text_template: '${entity.state ? entity.state.replace(/\s{2,}/g,"") : "undefined"}'
#
# The above text_template uses jQuery syntax to search and replace any instance of 2 consecutive (or more) spaces in a string of text.
